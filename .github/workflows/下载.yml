name: youtube

on:
  workflow_dispatch:
    inputs:
      video_url:
        description: '输入YouTube视频链接'
        required: true
        default: 'https://youtu.be/sample_video'
      enable_matrix:
        description: '是否启用矩阵作业'
        required: true
        type: choice
        options:
          - 'Yes'
          - 'No'
        default: 'No'
      media_choices:
        description: '启用矩阵作业时选择多个媒体类型 (用逗号分隔，例如: 720p, 1080p + Audio, 1440p)'
        required: false
        default: ''
      media_choice:
        description: '传统模式下选择一个媒体类型'
        required: false
        type: choice
        options:
          - '720p'
          - '1080p'
          - '1440p'
          - '4K'
          - '8K'
          - '720p + Audio'
          - '1080p + Audio'
          - '1440p + Audio'
          - '4K + Audio'
          - '8K + Audio'
          - 'Audio Only'
        default: '1080p + Audio'

jobs:
  get_media:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Install yt-dlp and ffmpeg
        run: |
          pip install yt-dlp
          sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: 处理媒体选择
        id: process_media_choices
        run: |
          if [[ "${{ github.event.inputs.enable_matrix }}" == "Yes" ]]; then
            # 将输入的媒体选择转换为数组
            IFS=', ' read -r -a media_array <<< "${{ github.event.inputs.media_choices }}"
            echo "MEDIA_CHOICES=${media_array[@]}" >> $GITHUB_ENV
          else
            echo "MEDIA_CHOICES=\"${{ github.event.inputs.media_choice }}\"" >> $GITHUB_ENV
          fi

      - name: 获取视频和音频流编号
        run: |
          yt-dlp --cookies cookies.txt -F ${{ github.event.inputs.video_url }} > formats.txt
          
          # 解析每个媒体选择
          IFS=', ' read -r -a media_array <<< "$MEDIA_CHOICES"
          for index in "${!media_array[@]}"; do
            MEDIA_CHOICE="${media_array[index]}"
            if [[ "$MEDIA_CHOICE" == *"+ Audio"* ]]; then
              RES=$(echo "$MEDIA_CHOICE" | sed 's/ + Audio//')
              VIDEO_STREAM_ID=$(grep -E "${RES}" formats.txt | grep https | sort -k6 -nr | head -n 1 | awk '{print $1}')
              AUDIO_STREAM_ID=$(grep 'audio only' formats.txt | grep https | sort -k6 -nr | head -n 1 | awk '{print $1}')
              echo "VIDEO_STREAM_ID_${index}=$VIDEO_STREAM_ID" >> $GITHUB_ENV
              echo "AUDIO_STREAM_ID_${index}=$AUDIO_STREAM_ID" >> $GITHUB_ENV
            elif [[ "$MEDIA_CHOICE" == "Audio Only" ]]; then
              AUDIO_ONLY_STREAM_ID=$(grep 'audio only' formats.txt | grep https | sort -k6 -nr | head -n 1 | awk '{print $1}')
              echo "AUDIO_ONLY_STREAM_ID_${index}=$AUDIO_ONLY_STREAM_ID" >> $GITHUB_ENV
            else
              VIDEO_ONLY_STREAM_ID=$(grep -E "${MEDIA_CHOICE}" formats.txt | grep https | sort -k6 -nr | head -n 1 | awk '{print $1}')
              echo "VIDEO_ONLY_STREAM_ID_${index}=$VIDEO_ONLY_STREAM_ID" >> $GITHUB_ENV
            fi
          done
      
      - name: 下载视频和音频
        run: |
          IFS=', ' read -r -a media_array <<< "$MEDIA_CHOICES"
          for index in "${!media_array[@]}"; do
            VIDEO_STREAM_ID_VAR="VIDEO_STREAM_ID_${index}"
            AUDIO_STREAM_ID_VAR="AUDIO_STREAM_ID_${index}"
            AUDIO_ONLY_STREAM_ID_VAR="AUDIO_ONLY_STREAM_ID_${index}"
            VIDEO_ONLY_STREAM_ID_VAR="VIDEO_ONLY_STREAM_ID_${index}"

            TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
            
            if [[ -n "${!VIDEO_STREAM_ID_VAR}" && -n "${!AUDIO_STREAM_ID_VAR}" ]]; then
              yt-dlp --cookies cookies.txt \
              -f "${!VIDEO_STREAM_ID_VAR}+${!AUDIO_STREAM_ID_VAR}" \
              --concurrent-fragments 10 -o "downloads/%(id)s_${TIMESTAMP}.%(ext)s" ${{ github.event.inputs.video_url }}
            elif [[ -n "${!AUDIO_ONLY_STREAM_ID_VAR}" ]]; then
              yt-dlp --cookies cookies.txt \
              -f "${!AUDIO_ONLY_STREAM_ID_VAR}" \
              --concurrent-fragments 10 -o "downloads/%(id)s_${TIMESTAMP}.%(ext)s" ${{ github.event.inputs.video_url }}
            elif [[ -n "${!VIDEO_ONLY_STREAM_ID_VAR}" ]]; then
              yt-dlp --cookies cookies.txt \
              -f "${!VIDEO_ONLY_STREAM_ID_VAR}" \
              --concurrent-fragments 10 -o "downloads/%(id)s_${TIMESTAMP}.%(ext)s" ${{ github.event.inputs.video_url }}
            fi
          done
      
      - name: 获取下载文件的路径
        run: |
          # 获取下载的文件路径
          FILE_PATH=$(ls downloads/*)
          echo "下载的文件路径: $FILE_PATH"
          
          # 处理文件路径，确保写入环境变量时格式正确
          IFS=$'\n' read -rd '' -a FILE_ARRAY <<< "$FILE_PATH"
          
          # 打印调试信息，确认文件路径数组内容
          echo "调试：文件路径数组"
          for file in "${FILE_ARRAY[@]}"; do
            echo "$file"
          done
          
          FILE_PATH_STRING=""
          for file in "${FILE_ARRAY[@]}"; do
            FILE_PATH_STRING+="$file,"
          done
          
          # 移除最后一个逗号
          FILE_PATH_STRING=${FILE_PATH_STRING%,}
          
          # 修正输出，移除所有多余的空格和换行符
          FILE_PATH_STRING=$(echo $FILE_PATH_STRING | tr -d '\n' | tr -d ' ')
          
          echo "FILE_PATH=$FILE_PATH_STRING" >> $GITHUB_ENV

          # 检查写入的环境变量
          echo "调试：检查写入的 FILE_PATH 环境变量"
          echo "最终写入的 FILE_PATH=$FILE_PATH_STRING"
