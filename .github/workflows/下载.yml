name: youtube

on:
  workflow_dispatch:
    inputs:
      video_url:
        description: '输入YouTube视频链接'
        required: true
        default: 'https://youtu.be/sample_video'
      enable_matrix:
        description: '是否启用矩阵作业'
        required: true
        type: choice
        options:
          - 'Yes'
          - 'No'
        default: 'No'
      media_choices:
        description: '启用矩阵作业时选择多个媒体类型 (用逗号分隔，例如: 720p, 1080p + Audio, 1440p)'
        required: false
        default: ''
      media_choice:
        description: '传统模式下选择一个媒体类型'
        required: false
        type: choice
        options:
          - '720p'
          - '1080p'
          - '1440p'
          - '4K'
          - '8K'
          - '720p + Audio'
          - '1080p + Audio'
          - '1440p + Audio'
          - '4K + Audio'
          - '8K + Audio'
          - 'Audio Only'
        default: '1080p + Audio'

jobs:
  get_media:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Install yt-dlp and ffmpeg
        run: |
          pip install yt-dlp
          sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: 处理媒体选择
        id: process_media_choices
        run: |
          if [[ "${{ github.event.inputs.enable_matrix }}" == "Yes" ]]; then
            # 将输入的媒体选择转换为数组
            IFS=', ' read -r -a media_array <<< "${{ github.event.inputs.media_choices }}"
            echo "MEDIA_CHOICES=${media_array[@]}" >> $GITHUB_ENV
          else
            echo "MEDIA_CHOICES=\"${{ github.event.inputs.media_choice }}\"" >> $GITHUB_ENV
          fi

      - name: 获取视频和音频流编号
        env:
          COOKIES_CONTENT: ${{ secrets.COOKIES }}
        run: |
          yt-dlp --cookies <(echo "$COOKIES_CONTENT") -F ${{ github.event.inputs.video_url }} > formats.txt

          # 判断是否为矩阵模式或传统模式
          if [[ "$MEDIA_CHOICES" == *", "* ]]; then
          echo "检测到矩阵模式，使用带空格的逗号分隔符，不使用 xargs"
          IFS=', ' read -r -a media_array <<< "$MEDIA_CHOICES"
          else
          echo "检测到传统模式，使用不带空格的逗号分隔符，使用 xargs 去除前后空格"
          IFS=',' read -r -a media_array <<< "$MEDIA_CHOICES"
          fi

          # 遍历并处理每个媒体选择
          for index in "${!media_array[@]}"; do
          # 在传统模式下使用 xargs 去除前后空格，在矩阵模式下不使用
          if [[ "$MEDIA_CHOICES" == *", "* ]]; then
          MEDIA_CHOICE="${media_array[index]}"  # 矩阵模式下，不使用 xargs
          else
          MEDIA_CHOICE=$(echo "${media_array[index]}" | xargs)  # 传统模式下，使用 xargs 去掉前后空格
          fi
  
          echo "处理选择: $MEDIA_CHOICE"
  
          if [[ "$MEDIA_CHOICE" == *"+ Audio"* ]]; then
          # 解析带音频的媒体选择
          RES=$(echo "$MEDIA_CHOICE" | sed 's/ + Audio//')
          VIDEO_STREAM_ID=$(grep -E "${RES}" formats.txt | grep https | sort -k6 -nr | head -n 1 | awk '{print $1}')
          AUDIO_STREAM_ID=$(grep 'audio only' formats.txt | grep https | sort -k6 -nr | head -n 1 | awk '{print $1}')
          echo "解析到的视频流编号: $VIDEO_STREAM_ID, 音频流编号: $AUDIO_STREAM_ID"
          echo "VIDEO_STREAM_ID_${index}=$VIDEO_STREAM_ID" >> $GITHUB_ENV
          echo "AUDIO_STREAM_ID_${index}=$AUDIO_STREAM_ID" >> $GITHUB_ENV
          elif [[ "$MEDIA_CHOICE" == "Audio Only" ]]; then
          # 仅音频
          AUDIO_ONLY_STREAM_ID=$(grep 'audio only' formats.txt | grep https | sort -k6 -nr | head -n 1 | awk '{print $1}')
          echo "解析到的仅音频流编号: $AUDIO_ONLY_STREAM_ID"
          echo "AUDIO_ONLY_STREAM_ID_${index}=$AUDIO_ONLY_STREAM_ID" >> $GITHUB_ENV
          else
          # 仅视频
          VIDEO_ONLY_STREAM_ID=$(grep -E "${MEDIA_CHOICE}" formats.txt | grep https | sort -k6 -nr | head -n 1 | awk '{print $1}')
          echo "解析到的仅视频流编号: $VIDEO_ONLY_STREAM_ID"
          echo "VIDEO_ONLY_STREAM_ID_${index}=$VIDEO_ONLY_STREAM_ID" >> $GITHUB_ENV
          fi
          done
      
      - name: 下载视频和音频
        env:
          COOKIES_CONTENT: ${{ secrets.COOKIES }}
        run: |
          IFS=', ' read -r -a media_array <<< "$MEDIA_CHOICES"
          for index in "${!media_array[@]}"; do
            VIDEO_STREAM_ID_VAR="VIDEO_STREAM_ID_${index}"
            AUDIO_STREAM_ID_VAR="AUDIO_STREAM_ID_${index}"
            AUDIO_ONLY_STREAM_ID_VAR="AUDIO_ONLY_STREAM_ID_${index}"
            VIDEO_ONLY_STREAM_ID_VAR="VIDEO_ONLY_STREAM_ID_${index}"

            TIMESTAMP=$(date +"%H%M%S")
            
            echo "正在下载: $MEDIA_CHOICE (视频流: ${!VIDEO_STREAM_ID_VAR}, 音频流: ${!AUDIO_STREAM_ID_VAR}, 仅音频流: ${!AUDIO_ONLY_STREAM_ID_VAR}, 仅视频流: ${!VIDEO_ONLY_STREAM_ID_VAR})"
            
            if [[ -n "${!VIDEO_STREAM_ID_VAR}" && -n "${!AUDIO_STREAM_ID_VAR}" ]]; then
              # 下载带音频的视频流
              yt-dlp --cookies <(echo "$COOKIES_CONTENT") \
              -f "${!VIDEO_STREAM_ID_VAR}+${!AUDIO_STREAM_ID_VAR}" \
              --concurrent-fragments 10 -o "downloads/${TIMESTAMP}.%(ext)s" ${{ github.event.inputs.video_url }}
            elif [[ -n "${!AUDIO_ONLY_STREAM_ID_VAR}" ]]; then
              # 下载仅音频
              yt-dlp --cookies <(echo "$COOKIES_CONTENT") \
              -f "${!AUDIO_ONLY_STREAM_ID_VAR}" \
              --concurrent-fragments 10 -o "downloads/${TIMESTAMP}.%(ext)s" ${{ github.event.inputs.video_url }}
            elif [[ -n "${!VIDEO_ONLY_STREAM_ID_VAR}" ]]; then
              # 下载仅视频
              yt-dlp --cookies <(echo "$COOKIES_CONTENT") \
              -f "${!VIDEO_ONLY_STREAM_ID_VAR}" \
              --concurrent-fragments 10 -o "downloads/${TIMESTAMP}.%(ext)s" ${{ github.event.inputs.video_url }}
            fi
          done
      
      - name: 获取下载文件的路径
        run: |
          FILE_PATH=$(ls downloads/* | head -n 1)
          echo "下载的文件路径: $FILE_PATH"
          echo "FILE_PATH=$FILE_PATH" >> $GITHUB_ENV
