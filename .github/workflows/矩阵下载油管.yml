name: 下载 YouTube 视频

on:
  workflow_dispatch:
    inputs:
      video_url:
        description: '请输入 YouTube 视频链接（必填）'
        required: true
        default: 'https://youtu.be/sample_video'
      enable_parallel_download:
        description: '是否启用并列下载多个分辨率或格式（选择“是”以下载多个）'
        required: false
        type: choice
        options:
          - '是'
          - '否'
        default: '否'
      media_inputs:
        description: |
          如果选择‘是’，请输入多个视频分辨率或格式（用空格分隔，例如：1080p 2160p 1080p+音频 2160p+音频 仅音频）。如果不确定，可以查看下方单一下载模式中的下拉菜单预设名称，以确保输入与预设名称一致，请勿输入未在预设名称中列出的其他格式。
          注意：您下载的视频最高分辨率取决于发布者上传的文件原始分辨率，并非所有视频都具备4K或8K分辨率。当您输入较高的分辨率时，例如2160p或4320p，而视频本身不具备该分辨率，下载器将自动选择可用的最佳质量格式下载；如果选择‘否’，请使用下方的单一下载模式。
        required: false
        default: ''
      media_choice:
        description: '单一下载模式下选择一个视频分辨率或格式。注意：如果您选择较高的分辨率，例如2160p或4320p，而视频本身不具备该分辨率，下载器将自动选择可用的最佳质量格式下载。'
        required: false
        type: choice
        options:
          - '720p'
          - '1080p'
          - '1440p'
          - '2160p'
          - '4320p'
          - '720p+音频'
          - '1080p+音频'
          - '1440p+音频'
          - '2160p+音频'
          - '4320p+音频'
          - '仅音频'
        default: '1080p+音频'

jobs:
  get_media:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: 安装 yt-dlp 和 ffmpeg
        run: |
          pip install yt-dlp
          sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: 获取视频和音频流的编号以便后续下载
        env:
          COOKIES_CONTENT: ${{ secrets.COOKIES }}
        run: |
          yt-dlp --cookies <(echo "$COOKIES_CONTENT") -F ${{ github.event.inputs.video_url }} > formats.txt

          # 判断是否启用并列下载多个分辨率或格式
          if [[ "${{ github.event.inputs.enable_parallel_download }}" == "是" ]]; then
            # 在并列下载模式下，将输入的多个视频分辨率或格式转换为数组
            IFS=' ' read -r -a media_array <<< "${{ github.event.inputs.media_inputs }}"
            echo "MEDIA_CHOICES=${media_array[@]}" >> $GITHUB_ENV  # 将数组写入 MEDIA_CHOICES 变量
          else
            # 在单一下载模式下，直接使用用户选择的视频分辨率或格式
            media_array=("${{ github.event.inputs.media_choice }}")
            echo "MEDIA_CHOICES=${{ github.event.inputs.media_choice }}" >> $GITHUB_ENV  # 将单一选择写入 MEDIA_CHOICES 变量
          fi

          # 遍历并处理每个用户选择的视频分辨率或格式
          for index in "${!media_array[@]}"; do
            MEDIA_CHOICE="${media_array[index]}"  # 直接使用媒体选择

            echo "处理选择: $MEDIA_CHOICE"

            if [[ "$MEDIA_CHOICE" == *"+音频"* ]]; then
              # 解析选择的包含音频的视频格式
              RES=$(echo "$MEDIA_CHOICE" | sed 's/+音频//')
              VIDEO_STREAM_ID=$(grep -E "${RES}" formats.txt | grep https | sort -k6 -nr | head -n 1 | awk '{print $1}')
              AUDIO_STREAM_ID=$(grep 'audio only' formats.txt | grep https | sort -k6 -nr | head -n 1 | awk '{print $1}')
              echo "解析到的视频流编号: $VIDEO_STREAM_ID, 音频流编号: $AUDIO_STREAM_ID"
              echo "VIDEO_STREAM_ID_${index}=$VIDEO_STREAM_ID" >> $GITHUB_ENV
              echo "AUDIO_STREAM_ID_${index}=$AUDIO_STREAM_ID" >> $GITHUB_ENV
            elif [[ "$MEDIA_CHOICE" == "仅音频" ]]; then
              # 处理仅音频的选择
              AUDIO_ONLY_STREAM_ID=$(grep 'audio only' formats.txt | grep https | sort -k6 -nr | head -n 1 | awk '{print $1}')
              echo "解析到的仅音频流编号: $AUDIO_ONLY_STREAM_ID"
              echo "AUDIO_ONLY_STREAM_ID_${index}=$AUDIO_ONLY_STREAM_ID" >> $GITHUB_ENV
            else
              # 处理仅视频的选择
              VIDEO_ONLY_STREAM_ID=$(grep -E "${MEDIA_CHOICE}" formats.txt | grep https | sort -k6 -nr | head -n 1 | awk '{print $1}')
              echo "解析到的仅视频流编号: $VIDEO_ONLY_STREAM_ID"
              echo "VIDEO_ONLY_STREAM_ID_${index}=$VIDEO_ONLY_STREAM_ID" >> $GITHUB_ENV
            fi
          done
      
      - name: 下载视频和音频
        env:
          COOKIES_CONTENT: ${{ secrets.COOKIES }}
        run: |
          IFS=' ' read -r -a media_array <<< "$MEDIA_CHOICES"
          for index in "${!media_array[@]}"; do
            VIDEO_STREAM_ID_VAR="VIDEO_STREAM_ID_${index}"
            AUDIO_STREAM_ID_VAR="AUDIO_STREAM_ID_${index}"
            AUDIO_ONLY_STREAM_ID_VAR="AUDIO_ONLY_STREAM_ID_${index}"
            VIDEO_ONLY_STREAM_ID_VAR="VIDEO_ONLY_STREAM_ID_${index}"

            TIMESTAMP=$(date +"%H%M%S")
            
            echo "正在下载: $MEDIA_CHOICE (视频流: ${!VIDEO_STREAM_ID_VAR}, 音频流: ${!AUDIO_STREAM_ID_VAR}, 仅音频流: ${!AUDIO_ONLY_STREAM_ID_VAR}, 仅视频流: ${!VIDEO_ONLY_STREAM_ID_VAR})"
            
            if [[ -n "${!VIDEO_STREAM_ID_VAR}" && -n "${!AUDIO_STREAM_ID_VAR}" ]]; then
              # 下载带音频的视频流
              yt-dlp --cookies <(echo "$COOKIES_CONTENT") \
              -f "${!VIDEO_STREAM_ID_VAR}+${!AUDIO_STREAM_ID_VAR}" \
              --concurrent-fragments 10 -o "downloads/${TIMESTAMP}.%(ext)s" ${{ github.event.inputs.video_url }}
            elif [[ -n "${!AUDIO_ONLY_STREAM_ID_VAR}" ]]; then
              # 下载仅音频
              yt-dlp --cookies <(echo "$COOKIES_CONTENT") \
              -f "${!AUDIO_ONLY_STREAM_ID_VAR}" \
              --concurrent-fragments 10 -o "downloads/${TIMESTAMP}.%(ext)s" ${{ github.event.inputs.video_url }}
            elif [[ -n "${!VIDEO_ONLY_STREAM_ID_VAR}" ]]; then
              # 下载仅视频
              yt-dlp --cookies <(echo "$COOKIES_CONTENT") \
              -f "${!VIDEO_ONLY_STREAM_ID_VAR}" \
              --concurrent-fragments 10 -o "downloads/${TIMESTAMP}.%(ext)s" ${{ github.event.inputs.video_url }}
            fi
          done
      
      - name: 获取下载文件的路径
        run: |
          FILE_PATH=$(ls downloads/* | head -n 1)
          echo "下载的文件路径: $FILE_PATH"
          echo "FILE_PATH=$FILE_PATH" >> $GITHUB_ENV
